<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.pplm.gadgets.coder.mapper.FuncMapper">
  <resultMap id="BaseResultMap" type="org.pplm.gadgets.coder.bean.Func">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="delete_flag" jdbcType="INTEGER" property="deleteFlag" />
    <result column="pid" jdbcType="BIGINT" property="pid" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="rela_attr" jdbcType="VARCHAR" property="relaAttr" />
    <result column="permission_tag" jdbcType="VARCHAR" property="permissionTag" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="sov" jdbcType="INTEGER" property="sov" />
    <result column="creator_id" jdbcType="BIGINT" property="creatorId" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="updator_id" jdbcType="BIGINT" property="updatorId" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, delete_flag, pid, name, code, rela_attr, permission_tag, remark, sov, creator_id, 
    create_date, updator_id, update_date
  </sql>
  <select id="selectByExample" parameterType="org.pplm.gadgets.coder.bean.FuncExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from func
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from func
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from func
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.pplm.gadgets.coder.bean.FuncExample">
    delete from func
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.pplm.gadgets.coder.bean.Func">
    insert into func (id, delete_flag, pid, 
      name, code, rela_attr, 
      permission_tag, remark, sov, 
      creator_id, create_date, updator_id, 
      update_date)
    values (#{id,jdbcType=BIGINT}, #{deleteFlag,jdbcType=INTEGER}, #{pid,jdbcType=BIGINT}, 
      #{name,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, #{relaAttr,jdbcType=VARCHAR}, 
      #{permissionTag,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, #{sov,jdbcType=INTEGER}, 
      #{creatorId,jdbcType=BIGINT}, #{createDate,jdbcType=TIMESTAMP}, #{updatorId,jdbcType=BIGINT}, 
      #{updateDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="org.pplm.gadgets.coder.bean.Func">
    insert into func
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="deleteFlag != null">
        delete_flag,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="code != null">
        code,
      </if>
      <if test="relaAttr != null">
        rela_attr,
      </if>
      <if test="permissionTag != null">
        permission_tag,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="sov != null">
        sov,
      </if>
      <if test="creatorId != null">
        creator_id,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updatorId != null">
        updator_id,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="deleteFlag != null">
        #{deleteFlag,jdbcType=INTEGER},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="relaAttr != null">
        #{relaAttr,jdbcType=VARCHAR},
      </if>
      <if test="permissionTag != null">
        #{permissionTag,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="sov != null">
        #{sov,jdbcType=INTEGER},
      </if>
      <if test="creatorId != null">
        #{creatorId,jdbcType=BIGINT},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updatorId != null">
        #{updatorId,jdbcType=BIGINT},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.pplm.gadgets.coder.bean.FuncExample" resultType="java.lang.Long">
    select count(*) from func
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update func
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.deleteFlag != null">
        delete_flag = #{record.deleteFlag,jdbcType=INTEGER},
      </if>
      <if test="record.pid != null">
        pid = #{record.pid,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.code != null">
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.relaAttr != null">
        rela_attr = #{record.relaAttr,jdbcType=VARCHAR},
      </if>
      <if test="record.permissionTag != null">
        permission_tag = #{record.permissionTag,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.sov != null">
        sov = #{record.sov,jdbcType=INTEGER},
      </if>
      <if test="record.creatorId != null">
        creator_id = #{record.creatorId,jdbcType=BIGINT},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatorId != null">
        updator_id = #{record.updatorId,jdbcType=BIGINT},
      </if>
      <if test="record.updateDate != null">
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update func
    set id = #{record.id,jdbcType=BIGINT},
      delete_flag = #{record.deleteFlag,jdbcType=INTEGER},
      pid = #{record.pid,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      code = #{record.code,jdbcType=VARCHAR},
      rela_attr = #{record.relaAttr,jdbcType=VARCHAR},
      permission_tag = #{record.permissionTag,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      sov = #{record.sov,jdbcType=INTEGER},
      creator_id = #{record.creatorId,jdbcType=BIGINT},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      updator_id = #{record.updatorId,jdbcType=BIGINT},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.pplm.gadgets.coder.bean.Func">
    update func
    <set>
      <if test="deleteFlag != null">
        delete_flag = #{deleteFlag,jdbcType=INTEGER},
      </if>
      <if test="pid != null">
        pid = #{pid,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="relaAttr != null">
        rela_attr = #{relaAttr,jdbcType=VARCHAR},
      </if>
      <if test="permissionTag != null">
        permission_tag = #{permissionTag,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="sov != null">
        sov = #{sov,jdbcType=INTEGER},
      </if>
      <if test="creatorId != null">
        creator_id = #{creatorId,jdbcType=BIGINT},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updatorId != null">
        updator_id = #{updatorId,jdbcType=BIGINT},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.pplm.gadgets.coder.bean.Func">
    update func
    set delete_flag = #{deleteFlag,jdbcType=INTEGER},
      pid = #{pid,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      code = #{code,jdbcType=VARCHAR},
      rela_attr = #{relaAttr,jdbcType=VARCHAR},
      permission_tag = #{permissionTag,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      sov = #{sov,jdbcType=INTEGER},
      creator_id = #{creatorId,jdbcType=BIGINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      updator_id = #{updatorId,jdbcType=BIGINT},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>